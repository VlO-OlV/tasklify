generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  username   String?
  firstName  String
  lastName   String
  isVerified Boolean     @default(false) @map("is_verified")
  boardUsers BoardUser[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Task {
  id          String     @id @default(uuid())
  name        String
  description String?
  deadline    DateTime?
  list        List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String     @map("list_id")
  priority    Priority
  assignee    BoardUser? @relation(fields: [assigneeId], references: [id])
  assigneeId  String?    @map("assignee_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("tasks")
}

model List {
  id        String   @id @default(uuid())
  name      String
  tasks     Task[]
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String   @map("board_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("lists")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EXTREME
}

model Board {
  id         String      @id @default(uuid())
  name       String
  lists      List[]
  boardUsers BoardUser[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("boards")
}

model BoardUser {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String    @map("board_id")
  userRole  BoardRole @map("user_role")
  tasks     Task[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, boardId])
  @@map("board_users")
}

enum BoardRole {
  ADMIN
  MODERATOR
  CONTRIBUTOR
}